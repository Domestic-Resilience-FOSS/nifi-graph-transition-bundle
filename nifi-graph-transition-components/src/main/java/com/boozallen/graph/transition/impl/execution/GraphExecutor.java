/*
 * See the NOTICE file distributed with this work for additional information
 * regarding copyright ownership. Booz Allen Hamilton licenses this file to
 * You under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.boozallen.graph.transition.impl.execution;

import com.google.common.primitives.Longs;
import org.apache.nifi.distributed.cache.client.DistributedMapCacheClient;
import org.apache.nifi.distributed.cache.client.Serializer;
import org.apache.nifi.flowfile.FlowFile;
import org.apache.nifi.graph.GraphClientService;
import org.apache.nifi.logging.ComponentLog;
import org.apache.nifi.processor.ProcessContext;
import org.apache.nifi.processor.ProcessSession;
import org.apache.nifi.serialization.RecordSetWriter;
import org.apache.nifi.serialization.record.Record;

import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Controls the execution of data generated by the ParameterGenerator against a graph database
 */
public abstract class GraphExecutor {
	protected ComponentLog log;
	protected GraphClientService clientService;
	protected DistributedMapCacheClient mapCacheClient;
	protected RecordSetWriter errorWriter;

	protected AtomicLong errors;

	public static final Serializer<String> KEY_SERIALIZER = (v, o) -> o.write(v.getBytes(StandardCharsets.UTF_8));
	public static final Serializer<Long> VALUE_SERIALIZER = (v, o) -> o.write(Longs.toByteArray(v));

	public GraphExecutor(ComponentLog log,
						 GraphClientService clientService,
						 DistributedMapCacheClient mapCacheClient,
						 RecordSetWriter errorWriter) {
		this.log = log;
		this.clientService = clientService;
		this.mapCacheClient = mapCacheClient;
		this.errorWriter = errorWriter;
		this.errors = new AtomicLong();
	}

	public AtomicLong getErrorCount() {
		return errors;
	}

	/**
	 * Set up the GraphExecutor for a run during onTriggered
	 *
	 * @param context The process context
	 * @param session The process session
	 * @param input The input flowfile. This should only be used to help with expression language evaluation
	 */
	public abstract void configure(ProcessContext context, ProcessSession session, FlowFile input);

	public abstract List<Map<String, Object>> execute(Map<String, Object> parameters,
													  final Record record);
}
